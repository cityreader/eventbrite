<?php

/**
 * @file
 * Eventbrite module.
 */

/**
 * Implements hook_libraries_info().
 */
function eventbrite_libraries_info() {
  // A very simple library. No changing APIs (hence, no versions), no variants. 
  $libraries['eventbrite.php'] = array(
    'name' => 'PHP Eventbrite API Client Library',
    'vendor url' => 'http://developer.eventbrite.com/doc/libraries',
    'download url' => 'https://github.com/ryanjarvinen/eventbrite.php.git',
    'files' => array(
      'php' => array('Eventbrite.php'),
    ),
    'version' => '1.0',
  );

  return $libraries;
}

/**
 * Implements hook_init().
 */
function eventbrite_init() {
  drupal_add_css(drupal_get_path('module', 'eventbrite') . '/eventbrite.css');
}

/*
 * Implementation of hook_menu().
 */
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function eventbrite_menu() {

  $items['admin/config/services/eventbrite'] = array(
    'title' => 'Eventbrite Configuration',
    'description' => 'Configure Eventbrite settings & objects',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eventbrite_admin_settings'),
    'access arguments' => array('administer eventbrite settings'),
    'file' => 'eventbrite.admin.inc',
  );

  $items['admin/config/services/eventbrite/api'] = array(
    'title' => 'API Settings',
    'description' => 'Configure Eventbrite API settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );

  $items['admin/config/services/eventbrite/organizers'] = array(
    'title' => 'Organizers',
    'description' => 'List Eventbrite organizers',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eventbrite_organizer_list_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer eventbrite settings'),
    'file' => 'eventbrite.organizer.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );

  // $items['admin/config/services/eventbrite/organizers/list'] = array(
  //   'title' => 'List Organizers',
  //   'description' => 'List Eventbrite organizers',
  //   'access callback' => 'user_access',
  //   'access arguments' => array('administer eventbrite settings'),
  //   'type' => MENU_DEFAULT_LOCAL_TASK,
  //   'weight' => 0,
  // );

  // $items['admin/config/services/eventbrite/organizers/add'] = array(
  //   'title' => 'Add an Organizer',
  //   'page callback' => 'drupal_get_form',
  //   'page arguments' => array('eventbrite_organizer'),
  //   'access callback' => 'user_access',
  //   'access arguments' => array('administer eventbrite settings'),
  //   'file' => 'eventbrite.organizer.inc',
  //   'type' => MENU_LOCAL_TASK,
  //   'weight' => 2,
  // );

  // $items['admin/config/services/eventbrite/organizers/%'] = array(
  //   'title' => 'Edit this Organizer',
  //   'description' => 'Edit an Eventbrite organizer',
  //   'page callback' => 'drupal_get_form',
  //   'page arguments' => array('eventbrite_organizer', 4),
  //   'access callback' => 'is_numeric',
  //   'access arguments' => array(4),
  //   'file' => 'eventbrite.organizer.inc',
  //   'type' => MENU_LOCAL_TASK,
  //   'weight' => 3,
  // );

  // // VENUES

  // $items['admin/config/services/eventbrite/venues'] = array(
  //   'title' => 'Venues',
  //   'description' => 'List Eventbrite venues',
  //   'page callback' => 'drupal_get_form',
  //   'page arguments' => array('eventbrite_venue_list_form'),
  //   'access callback' => 'user_access',
  //   'access arguments' => array('administer eventbrite settings'),
  //   'file' => 'eventbrite.venue.inc',
  //   'type' => MENU_LOCAL_TASK,
  //   'weight' => 2,
  // );

  // $items['admin/config/services/eventbrite/venues/list'] = array(
  //   'title' => 'List Venues',
  //   'description' => 'List Eventbrite venues',
  //   'access callback' => 'user_access',
  //   'access arguments' => array('administer eventbrite settings'),
  //   'type' => MENU_DEFAULT_LOCAL_TASK,
  //   'weight' => 0,
  // );

  // $items['admin/config/services/eventbrite/venues/add'] = array(
  //   'title' => 'Add a Venue',
  //   'page callback' => 'drupal_get_form',
  //   'page arguments' => array('eventbrite_venue'),
  //   'access callback' => 'user_access',
  //   'access arguments' => array('administer eventbrite settings'),
  //   'file' => 'eventbrite.venue.inc',
  //   'type' => MENU_LOCAL_TASK,
  //   'weight' => 2,
  // );

  // $items['admin/config/services/eventbrite/venues/%'] = array(
  //   'title' => 'Edit this Venue',
  //   'description' => 'Edit an Eventbrite venue',
  //   'page callback' => 'drupal_get_form',
  //   'page arguments' => array('eventbrite_venue', 4),
  //   'access callback' => 'is_numeric',
  //   'access arguments' => array(4),
  //   'file' => 'eventbrite.venue.inc',
  //   'type' => MENU_LOCAL_TASK,
  //   'weight' => 3,
  // );

  // $items['admin/config/services/eventbrite/payment-settings'] = array(
  //   'title' => 'Payment Settings',
  //   'description' => 'Configure default payment settings',
  //   'page callback' => 'drupal_get_form',
  //   'page arguments' => array('eventbrite_payment_default_settings'),
  //   'access callback' => 'user_access',
  //   'access arguments' => array('administer site configuration'),
  //   'file' => 'eventbrite.payment.inc',
  //   'type' => MENU_LOCAL_TASK,
  //   'weight' => 5,
  // );

  return $items;
}



/**
 * Implements hook_permissions().
 */
function eventbrite_permission() {
  return array(
    'administer eventbrite settings' => array(
      'title' => t('administer eventbrite settings'),
      'description' => t('Gives full control over the eventbrite admin page'),
    ),
    'administer eventbrite venues' => array(
      'title' => t('administer eventbrite venues'),
      'description' => t('allows users to configure eventbrite venues'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function eventbrite_theme() {
  return array(
    'eventbrite_venue_list_form' => array(
      'render element' => 'form',
      'file' => 'eventbrite.venue.inc',
    ),
    'eventbrite_organizer_list_form' => array(
      'render element' => 'form',
      'file' => 'eventbrite.organizer.inc',
    ),
  );
}

/* API FUNCTIONS EXPOSED TO OTHER MODULES */

/**
 * Get $eb_client instance
 */
function eventbrite_get_instance($app_key = '', $user_key = '') {
  static $eb_client;

  if (empty($eb_client) && eventbrite_is_valid_auth()) {
        
    libraries_load('eventbrite.php');

    $authentication_tokens = array(
      'app_key'  => $app_key ? $app_key : variable_get('eventbrite_app_key', ''),
      'user_key' => $user_key ? $user_key : variable_get('eventbrite_user_key', ''),
    );

    $eb_client = new Eventbrite($authentication_tokens); 
  }

  return $eb_client;
}

/**
 * Allows a get-oriented operation to called via the Eventbrite API
 *
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function eventbrite_get($op, $params = array()) {
  $result = array();

  $eb_client = eventbrite_get_instance();

  if (!$eb_client) {
    return FALSE;
  }

  $valid_callbacks = array(
    // Events
    'event_get',
    // Users
    'user_list_events',
    'user_list_venues',
    'user_list_organizers',
    'user_get',
  );

  if (in_array($op, $valid_callbacks)) {
    try{
      $result = $eb_client->$op($params);
    } catch (Exception $e) {
      drupal_set_message('Eventbrite API call failed. Error message:' . "\n" . $e->getMessage(), 'error');
      watchdog('eventbrite', 'Eventbrite API call failed. Error message:' . "\n" . $e->getMessage(), NULL, WATCHDOG_ERROR);
    }
  }
  else {
    drupal_set_message('Eventbrite get operation is not valid', 'error');
    watchdog('eventbrite', t('Eventbrite get operation is not valid'), NULL, WATCHDOG_ERROR);
  }

  return $result;
}

/*
 * Allows a save-oriented operation to called via the Eventbrite API
 */
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function eventbrite_save($op, $params) {
  $result = array();

  $eb_client = eventbrite_get_instance();

  if (!$eb_client) {
    return FALSE;
  }

  $valid_callbacks = array(
    // Events
    'event_new',
    'event_update',
    // Tickets
    'ticket_new',
    'ticket_update',
    // Venues
    'venue_new',
    'venue_update',
    // Organizer Profiles
    'organizer_new',
    'organizer_update',
    // Users
    'user_new',
    // Payments
    'payment_update',
  );

  if (in_array($op, $valid_callbacks)) {
    try{
      $result = $eb_client->$op($params);
    } catch (Exception $e) {
      drupal_set_message('Eventbrite API call failed. Error message:' . "\n" . $e->getMessage(), 'error');
      watchdog('eventbrite', 'Eventbrite API call failed. Error message:' . "\n" . $e->getMessage(), NULL, WATCHDOG_ERROR);
    }
  }
  else {
    drupal_set_message('Eventbrite save operation is not valid', 'error');
    watchdog('eventbrite', t('Eventbrite save operation is not valid'), NULL, WATCHDOG_ERROR);
  }

  return $result;
}

/*
 * This function translates offset into the formatting that Eventbrite API is expecting
 */
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function eventbrite_timezone_offset($offset) {
  $eb_timezone = 'GMT';
  $eb_timezone .= ($offset < 0) ? '-' : '+';
  $eb_timezone .= (abs($offset) >= 10) ? abs($offset) : '0' . abs($offset);

  return $eb_timezone;
}

/**
 * Returns Eventbrite's API user_list_events as a keyed array suitable
 * for option lists.
 *
 * @param mixed $id
 *   The event id for an event that must not be filtered.
 * @param boolean $allow_historical
 *   Whether or not events that start prior to the current time should
 *   be returned.
 * @return array
 *   An array of events keyed by event id and containing event titles.
 */
function eventbrite_get_events_options($id = null, $allow_historical = false) {
  $options = array();
  if ($events = eventbrite_get('user_list_events')) {
    $options[0] = '';
    foreach ($events as $event_id => $event) {
      if (($id == $event_id) || $allow_historical) {
        $options[$event_id] = $event->title;
      }
      else {
        $start_date_ts = date_convert($event->start_date, DATE_DATETIME, DATE_UNIX, $event->timezone);
        if ($start_date_ts > REQUEST_TIME) {
          $options[$event_id] = $event->title;
        }
      }
    }
  }
  return $options;
}

/*
 * This function returns TRUE if Eventbrite module is set up with valid Eventbrite authentication
 */
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function eventbrite_is_valid_auth() {
  return variable_get('eventbrite_is_valid_auth', FALSE);
}
