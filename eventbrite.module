<?php

/**
 * @file
 * Eventbrite module.
 */

define('EVENTBRITE_URL_ORG', 'http://www.eventbrite.com/org');
define('EVENTBRITE_DATE_FORMAT', 'Y-m-d H:i:s');

module_load_include('inc', 'eventbrite', 'includes/eventbrite.api');
//module_load_include('inc', 'eventbrite', 'includes/eventbrite.date');
//module_load_include('inc', 'eventbrite', 'includes/eventbrite.field');


/**
 * Implements hook_libraries_info().
 */
function eventbrite_libraries_info() {
  // A very simple library. No changing APIs (hence, no versions), no variants. 
  $libraries['eventbrite.php'] = array(
    'name' => 'PHP Eventbrite API Client Library',
    'vendor url' => 'http://developer.eventbrite.com/doc/libraries',
    'download url' => 'https://github.com/ryanjarvinen/eventbrite.php.git',
    'files' => array(
      'php' => array('Eventbrite.php'),
    ),
    'version' => '1.0',
    'error message' => t('Download PHP Eventbrite API Client Library'),
  );

  return $libraries;
}

/**
 * Implements hook_init().
 */
function eventbrite_init() {
  drupal_add_css(drupal_get_path('module', 'eventbrite') . '/eventbrite.css');
}

/**
 * Implements of hook_menu().
 */
function eventbrite_menu() {  
  //Field API autocomplete
  $items['eventbrite/autocomplete'] = array(
    'title' => 'Time zone field autocomplete',
    'page callback' => 'eventbritefield_autocomplete',
    'access arguments' => array('access content'),
    'file path' => drupal_get_path('module', 'eventbrite') . '/includes',
    'file' => 'eventbrite.field.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/services/eventbrite'] = array(
    'title' => 'Eventbrite Configuration',
    'description' => 'Configure Eventbrite settings & objects',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eventbrite_admin_settings'),
    'access arguments' => array('administer eventbrite settings'),
    'file path' => drupal_get_path('module', 'eventbrite') . '/includes',
    'file' => 'eventbrite.admin.inc',
  );

  $items['admin/config/services/eventbrite/api'] = array(
    'title' => 'API Settings',
    'description' => 'Configure Eventbrite API settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );

  $items['admin/config/services/eventbrite/payment-settings'] = array(
    'title' => 'Payment Settings',
    'description' => 'Configure default payment settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eventbrite_payment_admin_settings', TRUE),
    'access arguments' => array('administer eventbrite settings'),
    'file path' => drupal_get_path('module', 'eventbrite') . '/includes',
    'file' => 'eventbrite.payment.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  );

  return $items;
}

/**
 * Implements hook_entity_info().
 */
function eventbrite_entity_info() { 
  $entities['eventbrite_venue'] = array(
    'label' => t('Venue'),
    'entity class' => 'EventbriteVenue',
    'controller class' => 'EntityAPIController',
    'base table' => 'eventbrite_venue',
    'fieldable' => TRUE,
//    'view modes' => array(
//      'full' => array(
//        'label' => t('Full content'),
//        'custom settings' => FALSE,
//      ),
//      'teaser' => array(
//        'label' => t('Teaser'),
//        'custom settings' => TRUE,
//      ),
//    ),
    'bundles' => array(
      'eventbrite_venue' => array(
        'label' => t('Eventbrite Venue'),
        'admin' => array(
          'path' => 'admin/config/services/eventbrite/venues',
          'access arguments' => array('administer eventbrite events'),
        ),
      ),
    ),
    'entity keys' => array(
      'id' => 'venue_id',
      'label' => 'name',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'module' => 'eventbrite',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/config/services/eventbrite/venues',
      'file path' => drupal_get_path('module', 'eventbrite') . '/includes',
      'file' => 'eventbrite.venue.inc',
      'controller class' => 'EventbriteVenueUIController',
    ),
    'access callback' => 'eventbrite_access',
  );

  $entities['eventbrite_organizer'] = array(
    'label' => t('Organizer'),
    'entity class' => 'EventbriteOrganizer',
    'controller class' => 'EntityAPIController',
    'base table' => 'eventbrite_organizer',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'label' => 'name',
    ),
   'bundles' => array(
     'eventbrite_organizer' => array(
       'label' => t('Eventbrite Organizer'),
     ),
   ),
//    'view modes' => array(
//      'full' => array(
//        'label' => t('Full content'),
//        'custom settings' => FALSE,
//      ),
//      'teaser' => array(
//        'label' => t('Teaser'),
//        'custom settings' => TRUE,
//      ),
//    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'module' => 'eventbrite',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/config/services/eventbrite/organizers',
      'file path' => drupal_get_path('module', 'eventbrite') . '/includes',
      'file' => 'eventbrite.organizer.inc',
      'controller class' => 'EventbriteOrganizerUIController',
    ),
    'access callback' => 'eventbrite_access',
  );
  
  return $entities;
}

/**
 * Implements hook_permissions().
 */
function eventbrite_permission() {
  return array(
    'view eventbrite events' => array(
      'title' => t('View eventbrite events'),
      'description' => t('Allow users to view Eventbrite event content.'),
    ),
    'administer eventbrite settings' => array(
      'title' => t('Administer eventbrite settings'),
      'description' => t('Gives full control over the eventbrite admin page.'),
    ),
    'administer eventbrite events' => array(
      'title' => t('Administer eventbrite events'),
      'description' => t('Allows users to configure eventbrite events.'),
    ),
  );
}

/**
 * Access check for Eventbrite admin UI page
 */
function eventbrite_access($op, $entity = NULL, $account = NULL, $entity_type) {
  switch ($entity_type) {
    case 'eventbrite_event':
      return user_access('administer eventbrite events', $account);
    
    case 'eventbrite_venue':
      return user_access('administer eventbrite settings', $account);
     
    case 'eventbrite_organizer':
      return user_access('administer eventbrite settings', $account);
  }

  // if ($op == 'create' || $op == 'update') {
  //   $op = 'edit';
  // }
  // Allow modules to grant / deny access.
  return FALSE;
}


/**
 * Implements hook_theme().
 */
function eventbrite_theme() {
  $path = drupal_get_path('module', 'eventbrite');
  return array(
   'eventbrite_event' => array(
     'render element' => 'elements',
     'template' => 'eventbrite-event',
     'path' => $path . '/themes',
     'file' => 'theme.inc',
   ),
//    'eventbrite_organizer_list_form' => array(
//      'render element' => 'form',
//      'file' => 'eventbrite.organizer.inc',
//    ),
  );
}

/**
 * Implements hook_flush_caches().
 */
function eventbrite_flush_caches() {
  return array('cache_eventbrite');
}

/**
 * Implements hook_cron().
 *
 * Queues news feeds for updates once their refresh interval has elapsed.
 */
function eventbrite_cron() {
  // $result = db_query('SELECT * FROM {aggregator_feed} WHERE queued = 0 AND checked + refresh < :time AND refresh <> :never', array(
    // ':time' => REQUEST_TIME,
    // ':never' => AGGREGATOR_CLEAR_NEVER
  // ));
  // $queue = DrupalQueue::get('aggregator_feeds');
  // foreach ($result as $feed) {
    // if ($queue->createItem($feed)) {
      // // Add timestamp to avoid queueing item more than once.
      // db_update('aggregator_feed')
        // ->fields(array('queued' => REQUEST_TIME))
        // ->condition('fid', $feed->fid)
        // ->execute();
    // }
  // }
// 
  // // Remove queued timestamp after 6 hours assuming the update has failed.
  // db_update('aggregator_feed')
    // ->fields(array('queued' => 0))
    // ->condition('queued', REQUEST_TIME - (3600 * 6), '<')
    // ->execute();
}

/**
 * Implements hook_cron_queue_info().
 */
function eventbrite_cron_queue_info() {
  // $queues['aggregator_feeds'] = array(
    // 'worker callback' => 'aggregator_refresh',
    // 'time' => 60,
  // );
  // return $queues;
}

function eventbrite_debug_message($message) {
  if (variable_get('eventbrite_debug', 0)) {
    if (module_exists('devel')) {
      dpm($message);
    }
    else {
      $message = '<pre>' . print_r($message, TRUE) . '</pre>';
      drupal_set_message($message);
    }
  }
}

/**
 * Implements hook_eventbrite_user_list_organizers()
 */
function eventbrite_eventbrite_user_list_organizers($result) {

  $remote_organizer_ids = $result;
  $organizer_ids = db_query('SELECT organizer_id, id FROM {eventbrite_organizer}')->fetchAllKeyed();

  $new_organizer_ids = array_diff_key($remote_organizer_ids, $organizer_ids);

  $update_organizer_ids = array_intersect_key($organizer_ids, $remote_organizer_ids);

  foreach($new_organizer_ids as $organizer_id => $entry) {
    $organizer = eventbrite_organizer_create($entry);

    eventbrite_organizer_save($organizer);
  }

  foreach($update_organizer_ids as $organizer_id => $entity_id) {
    $organizer = eventbrite_organizer_load($entity_id);
    $entry = $result[$organizer_id];

    $organizer->name = $entry->name;
    $organizer->description = $entry->description;

    eventbrite_organizer_save($organizer);
  }
}

/**
 * Implements hook_eventbrite_user_list_venues()
 */
function eventbrite_eventbrite_user_list_venues($result) {
  $remote_venue_ids = $result;
  $venue_ids = db_query('SELECT venue_id FROM {eventbrite_venue}')->fetchCol();

  $venue_ids = empty($venue_ids) ? array() : array_flip($venue_ids);

  $new_venue_ids = array_diff_key($remote_venue_ids, $venue_ids);

  $update_venue_ids = array_keys(array_intersect_key($venue_ids, $remote_venue_ids));

  foreach($new_venue_ids as $venue_ids => $entry) {
    $venue = eventbrite_venue_create($entry);

    eventbrite_venue_save($venue);
  }

  foreach($update_venue_ids as $venue_ids) {
    $venue = eventbrite_venue_load($venue_ids);
    $entry = $result[$venue_ids];

    $venue->name = $entry->name;
    $venue->address = $entry->address;
    $venue->address_2 = $entry->address_2;
    $venue->city = $entry->city;
    $venue->region = $entry->region;
    $venue->postal_code = $entry->postal_code;
    $venue->country_code = $entry->country_code;

    eventbrite_venue_save($venue);
  }
}



/*
 * This function translates offset into the formatting that Eventbrite API is expecting
 */
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function eventbrite_timezone_offset($offset) {
  $eb_timezone = 'GMT';
  $eb_timezone .= ($offset < 0) ? '-' : '+';
  $eb_timezone .= (abs($offset) >= 10) ? abs($offset) : '0' . abs($offset);

  return $eb_timezone;
}

/**
 * Returns Eventbrite's API user_list_events as a keyed array suitable
 * for option lists.
 *
 * @param mixed $id
 *   The event id for an event that must not be filtered.
 * @param boolean $allow_historical
 *   Whether or not events that start prior to the current time should
 *   be returned.
 * @return array
 *   An array of events keyed by event id and containing event titles.
 */
function eventbrite_get_events_options($id = null, $allow_historical = false) {
  $options = array();
  if ($events = eventbrite_get('user_list_events')) {
    $options[0] = '';
    foreach ($events as $event_id => $event) {
      if (($id == $event_id) || $allow_historical) {
        $options[$event_id] = $event->title;
      }
      else {
        $start_date_ts = date_convert($event->start_date, DATE_DATETIME, DATE_UNIX, $event->timezone);
        if ($start_date_ts > REQUEST_TIME) {
          $options[$event_id] = $event->title;
        }
      }
    }
  }
  return $options;
}


/*
 * This function returns TRUE if Eventbrite module is set up with valid Eventbrite authentication
 */
/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function eventbrite_is_valid_auth() {
  return variable_get('eventbrite_is_valid_auth', FALSE);
}

/**
 * Eventbrite venue loader.
 *
 * @param $id
 *   (optional) The internal id for this venue. If no id is given all existing
 *   venues are returned.
 *
 * @return EventbriteVenue
 *   Returns a fully-loaded Eventbrite venue definition.
 */
function eventbrite_venue_load($id) {
  return entity_load_single('eventbrite_venue', $id);
}

/**
 * Load multiple Eventbrite venue entities based on certain conditions.
 *
 * @param $ids
 *   An array of Eventbrite venue internal IDs of Drupal.
 * @param $conditions
 *   An array of conditions to match against the {entity} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 *
 * @return
 *   An array of venue entities, indexed by venue ID.
 */
function eventbrite_venue_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('eventbrite_venue', $ids, $conditions, $reset);
}

/**
 * Create a Eventbrite venue object.
 */
function eventbrite_venue_create($values = array()) {
  if (is_object($values)) {
    $values = (array) $values;
  }

  return entity_get_controller('eventbrite_venue')->create($values);
}

/**
 * Saves an Eventbrite venue to the database.
 *
 * @param EventbriteVenue $venue
 *   The venue object.
 */
function eventbrite_venue_save(EventbriteVenue $venue) {
  return $venue->save();
}

/**
 * Eventbrite oganizer loader.
 *
 * @param $id
 *   (optional) The internal id for this organizer. If no id is given all existing
 *   organizers are returned.
 *
 * @return EventbriteOrganizer
 *   Returns a fully-loaded Eventbrite organizer if a id is passed.
 */
function eventbrite_organizer_load($id) {
  return entity_load_single('eventbrite_organizer', $id);
}

/**
 * Load multiple Eventbrite organizer entities based on certain conditions.
 *
 * @param $ids
 *   An array of Eventbrite organizer internal IDs of Drupal.
 * @param $conditions
 *   An array of conditions to match against the {entity} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 *
 * @return
 *   An array of organizer entities, indexed by organizer ID.
 */
function eventbrite_organizer_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('eventbrite_organizer', $ids, $conditions, $reset);
}

/**
 * Create a Eventbrite organizer object.
 */
function eventbrite_organizer_create($values = array()) {
  if (is_object($values)) {
    $values = (array) $values;
  }

  return entity_get_controller('eventbrite_organizer')->create($values);
}

/**
 * Saves an Eventbrite organizer to the database.
 *
 * @param EventbriteOrganizer $organizer
 *   The organizer object.
 */
function eventbrite_organizer_save(EventbriteOrganizer $organizer) {
  return $organizer->save();
}

/**
 * 
 */
function eventbrite_get_options($type) {
  $cache = &drupal_static(__FUNCTION__);
  
  if (!in_array($type, array('venue', 'organizer'))) {
    return array();
  }
  
  if (!isset($cache[$type])) {
    if ($type == 'venue') {
      $options = array('' => t('TBA'));
    }
    else {
      $options = array();
    }

    $result = db_select('eventbrite_' . $type, 'e')
      ->fields('e', array($type . '_id', 'name'))
      ->condition('e.status', 1)
      ->orderBY('e.name', 'ASC')
      ->execute()
      ->fetchAllKeyed();

    if ($result) {
      $options += $result;
    }

    $cache[$type] = empty($options) ? array() : $options;
  }
  
  return $cache[$type];
}

