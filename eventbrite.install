<?php

/**
 * @file
 * Install hooks for Eventbrite.
 */

/**
 * Implements hook_requirements().
 */
function eventbrite_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break at install time
  $t = get_t();

  if ($phase == 'update') {
    $path = drupal_get_path('module', 'libraries') . '/libraries.info';
    $info = drupal_parse_info_file($path);
    // version_compare() will return that '7.x-2.0-alpha1' version is less than '7.x-2.0'
    // so we compare it with '7.x-2.0-dev' in case any user use alpha version.
    if (version_compare($info['version'], '7.x-2.0-dev', '<')) {
      $requirements['eventbrite'] = array(
        'title' => $t('Eventbrite'),
        'value' => '7.x-2.x',
        'description' => $t('libraries 2.x is required for Eventbrite 7.x-2.0 or higher.'),
        'severity' => REQUIREMENT_ERROR
      );
      return $requirements;
    }
  }

  // Report Drupal version
  if (in_array($phase, array('runtime', 'update'))) {
    $library = libraries_detect('eventbrite.php');
    $requirements['eventbrite.php'] = array(
      'title' => $t('PHP Eventbrite API Client Library'),
    );

    if ($library['installed']) {
      $requirements['eventbrite.php'] += array(
        'description' => $t('PHP Eventbrite API Client Library is installed correctly.'),
        'severity' => REQUIREMENT_OK
      );
    }
    else {
      $requirements['eventbrite.php'] += array(
        'value' => $library['error'],
        'description' => $library['error message'],
        'severity' => REQUIREMENT_ERROR
      );
    }
  }

  return $requirements;
}
    
/**
 * Implements hook_field_schema().
 */
function eventbrite_field_schema() {
  $columns = array(
    'ticket_id' => array(
      'description' => 'The ticket type ID for external use.',
      'type' => 'int',
      'size' => 'tiny',
      'unsigned' => TRUE,
      'not null' => FALSE,
      'default' => 0,
    ),
    'name' => array(
      'description' => 'The ticket name.',
      'type' => 'varchar',
      'length' => 255,
      'not null' => TRUE,
      'default' => '',
    ),
    'description' => array(
      'description' => 'The ticket description.',
      'type' => 'text',
      'not null' => FALSE,
      'size' => 'medium',
    ),
    'is_donation' => array(
      'description' => '0 for fixed-price tickets, 1 for donations. 0 will be used by default if not provided.',
      'type' => 'int',
      'size' => 'tiny',
      'not null' => FALSE,
      'default' => 0,
    ),
    'price' => array(
      'description' => '',
      'type' => 'float',
      'not null' => FALSE,
      'default' => 0,
    ),
    'quantity_available' => array(
      'description' => '',
      'type' => 'int',
      'unsigned' => FALSE,
      'not null' => FALSE,
      'default' => 0,
    ),
    'start_date' => array(
      'description' => 'The date and time when ticket sales start, in ISO 8601 format (e.g., “2007-12-31 23:59:59″).',
      'type' => 'datetime',
      'mysql_type' => 'datetime',
      'pgsql_type' => 'timestamp without time zone',
      'sqlite_type' => 'varchar',
      'sqlsrv_type' => 'smalldatetime',
      'not null' => FALSE,
    ),
    'end_date' => array(
      'description' => 'The date and time when ticket sales stop, in ISO 8601 format (e.g., “2007-12-31 23:59:59″)',
      'type' => 'datetime',
      'mysql_type' => 'datetime',
      'pgsql_type' => 'timestamp without time zone',
      'sqlite_type' => 'varchar',
      'sqlsrv_type' => 'smalldatetime',
      'not null' => FALSE,
    ),
    'include_fee' => array(
      'description' => '0 to add the Eventbrite service fee on top of ticket price, or 1 to include it in the ticket price. 0 will be used by default if not provided.',
      'type' => 'int',
      'size' => 'tiny',
      'not null' => TRUE,
      'default' => 0,
    ),
    'min' => array(
      'description' => 'The minimum number of tickets per order.',
      'type' => 'int',
      'unsigned' => FALSE,
      'not null' => FALSE,
      'default' => 1,
    ),
    'max' => array(
      'description' => 'The maximum number of tickets per order.',
      'type' => 'int',
      'unsigned' => FALSE,
      'not null' => FALSE,
      'default' => 0,
    ),
    'hide' => array(
      'description' => 'Show or hide the ticket type.',
      'type' => 'int',
      'size' => 'tiny',
      'not null' => TRUE,
      'default' => 0,
    ),
  );

  return array(
    'columns' => $columns,
    'indexes' => array(
      'ticket_id' => array('ticket_id'),
    ),
  );
}

/**
 * Implements hook_schema().
 */
function eventbrite_schema() {
  $schema['cache_eventbrite'] = drupal_get_schema_unprocessed('system', 'cache');
  $schema['cache_eventbrite']['description'] = 'Cache table for the Eventbrite module to store info fetched from Eventbrite website.';

//  $schema['eventbrite_cache'] = array(
//    'fields' => array(
//      'op' => array(
//        'type' => 'varchar',
//        'length' => 32,
//        'not null' => TRUE,
//      ),
//      'id' => array(
//        'type' => 'int',
//        'size' => 'big',
//        'unsigned' => TRUE,
//        'not null' => TRUE,
//        'default' => 0,
//      ),
//      'query_string' => array(
//        'type' => 'varchar',
//        'length' => 128,
//        'not null' => TRUE,
//      ),
//      'timestamp' => array(
//        'type' => 'int',
//        'not null' => TRUE,
//        'default' => 0,
//      ),
//      'result' => array(
//        'type' => 'text',
//        'not null' => TRUE,
//        'size' => 'big',
//      ),
//    ),
//    'primary key' => array('op', 'id', 'query_string'),
//  );


  $schema['eventbrite_event'] = array(
    'fields' => array(
      'id' => array(
        'description' => "The eventbrite_event entity id.",
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'user_key' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => FALSE,
      ),
      'event_id' => array(
        'description' => "The Eventbrite event id.",
        'type' => 'varchar',
        'length' => '20',
        'not null' => TRUE,
      ),
      'title' => array(
        'description' => "The event title.",
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'description' => array(
        'description' => "The event description.",
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'medium',
      ),
      'description_format' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'start_date' => array(
        'description' => 'The event start date and time, in ISO 8601 format',
        'type' => 'datetime',
        'mysql_type' => 'datetime',
        'pgsql_type' => 'timestamp without time zone',
        'sqlite_type' => 'varchar',
        'sqlsrv_type' => 'smalldatetime',
        'not null' => TRUE,
      ),
      'end_date' => array(
        'description' => 'The event end date and time, in ISO 8601 format',
        'type' => 'datetime',
        'mysql_type' => 'datetime',
        'pgsql_type' => 'timestamp without time zone',
        'sqlite_type' => 'varchar',
        'sqlsrv_type' => 'smalldatetime',
        'not null' => TRUE,
      ),
      'privacy' => array(
        'description' => '0 for a private event, 1 for a public event. If not provided, will default to 0.',
        'type' => 'int',
        'not null' => TRUE,
        'size' => 'tiny',
        'default' => 0,
      ),
      'personalized_url' => array(
        'description' => 'The event registration URL.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'venue_id' => array(
        'description' => 'The event venue ID',
        'type' => 'varchar',
        'length' => 32,
        'not null' => FALSE,
      ),
      'organizer_id' => array(
        'description' => 'The event organizer ID.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => FALSE,
      ),
      'capacity' => array(
        'description' => 'The maximum number of people who can attend the event.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'status' => array(
        'description' => 'The event status. Allowed values are 0 for “draft”, 1 for “live”.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the event was most created.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'modified' => array(
        'description' => 'The Unix timestamp when the event was most recently saved.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'event_id' => array('event_id'),
    ),
    'foreign keys' => array(
      'eventbrite_organizer' => array(
        'table' => 'eventbrite_organizer',
        'columns' => array('organizer_id' => 'organizer_id'),
      ),
      'eventbrite_venue' => array(
        'table' => 'eventbrite_venue',
        'columns' => array('venue_id' => 'venue_id'),
      ),
    ),
  );

  $schema['eventbrite_venue'] = array(
    'fields' => array(
      'venue_id' => array(
        'description' => "The Eventbrite venue id.",
        'type' => 'int',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'user_key' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => FALSE,
      ),
      'organizer_id' => array(
        'description' => "The Eventbrite organizer id.",
        'type' => 'varchar',
        'length' => '20',
        'not null' => FALSE,
      ),
      'status' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => FALSE,
      ),
      'address' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => FALSE,
      ),
      'address_2' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => FALSE,
      ),
      'city' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => FALSE,
      ),
      'region' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => FALSE,
      ),
      'postal_code' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => FALSE,
      ),
      'country_code' => array(
        'type' => 'varchar',
        'length' => 2,
        'not null' => FALSE,
      ),
      'longitude' => array(
        'type' => 'float',
        'not null' => FALSE,
      ),
      'latitude' => array(
        'type' => 'float',
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('venue_id'),
    'foreign keys' => array(
      'eventbrite_event' => array(
        'table' => 'eventbrite_event',
        'columns' => array('venue_id' => 'venue_id'),
      ),
    ),
  );

  $schema['eventbrite_organizer'] = array(
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: eventbrite_organizer entity id',
      ),
      'user_key' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => FALSE,
      ),
      'organizer_id' => array(
        'description' => "The Eventbrite organizer id.",
        'type' => 'varchar',
        'length' => '20',
        'not null' => TRUE,
      ),
      'status' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 1,
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => FALSE,
      ),
//      'url' => array(
//        'type' => 'varchar',
//        'length' => 32,
//        'not null' => FALSE,
//      ),
      'description' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'organizer_id' => array('organizer_id'),
    ),
    'foreign keys' => array(
      'eventbrite_event' => array(
        'table' => 'eventbrite_event',
        'columns' => array('organizer_id' => 'organizer_id'),
      ),
    ),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function eventbrite_install() {
  // TODO The drupal_(un)install_schema functions are called automatically in D7.
  // drupal_install_schema('eventbrite')
}

/**
 * Remove variables on uninstall.
 */
function eventbrite_uninstall() {
  // TODO The drupal_(un)install_schema functions are called automatically in D7.
  // drupal_uninstall_schema('eventbrite')

  // No vars yet to be created by thei module
  // TODO Please review the conversion of this statement to the D7 database API syntax.
  /* db_query("DELETE FROM {variable} WHERE name LIKE 'eventbrite_%'") */
  db_delete('variable')
  ->condition('name', 'eventbrite_%', 'LIKE')
  ->execute();
  cache_clear_all('variables', 'cache');
}

/**
 * @addtogroup updates-6.x-to-7.x
 * @{
 */

/**
 * Replace table `eventbrite_cache` with table `cache_eventbrite`.
 */
function eventbrite_update_7000() {
  if (db_table_exists('eventbrite_cache')) {
    db_drop_table('eventbrite_cache');
  }

  if (!db_table_exists('cache_eventbrite')) {
    $schema['cache_eventbrite'] = drupal_get_schema_unprocessed('system', 'cache');
    $schema['cache_eventbrite']['description'] = 'Cache table for the Eventbrite module to store info fetched from Eventbrite website.';
    db_create_table('cache_eventbrite', $schema['cache_eventbrite']);
  }
}

/**
 * Drop field `url` from table `eventbrite_organizer`.
 */
function eventbrite_update_7001() {
  db_drop_field('eventbrite_organizer', 'url');
}

/**
 * Update `eventbrite_organizer` table by changing `venue_id` and `organizer_id` to 'unsigned'.
 */
function eventbrite_update_7002() {
  db_change_field('eventbrite_venue', 'organizer_id', 'organizer_id', array('description' => "The Eventbrite organizer id.", 'type' => 'int', 'size' => 'normal', 'unsigned' => TRUE, 'not null' => TRUE));
  db_change_field('eventbrite_venue', 'venue_id', 'venue_id',  array('description' => "The Eventbrite venue id.", 'type' => 'int', 'size' => 'normal', 'unsigned' => TRUE, 'not null' => TRUE));

}

/**
 * Update table `eventbrite_organizer` by adding new `id` field and changing `organizer_id` to 'varchar'.
 *
 * drupal_write_record has a bug to save big int or unsigned normal int
 * @see http://drupal.org/node/1947468
 */
function eventbrite_update_7003() {
  db_drop_primary_key('eventbrite_organizer');

  db_add_field('eventbrite_organizer', 'id', array('type' => 'serial', 'not null' => TRUE, 'description' => 'Primary Key: eventbrite_organizer entity id for internal use.'), array('primary key' => array('id')));

  db_change_field('eventbrite_organizer', 'organizer_id', 'organizer_id', array('description' => "The Eventbrite organizer id.", 'type' => 'varchar', 'length' => '20', 'not null' => TRUE));

  db_add_unique_key('eventbrite_organizer', 'organizer_id', array('organizer_id'));
}

/**
 * Rename field `address2` to `address_2` 
 */
function eventbrite_update_7004() {
  db_add_field('eventbrite_venue', 'address_2', array('type' => 'varchar', 'length' => 32, 'not null' => FALSE));

  db_query('UPDATE {eventbrite_venue} SET address_2 = address2');

  db_drop_field('eventbrite_venue', 'address2');
}

/**
 * Rename field `country` to `country_code` 
 */
function eventbrite_update_7005() {
  db_add_field('eventbrite_venue', 'country_code', array('type' => 'varchar', 'length' => 2, 'not null' => FALSE));

  db_query('UPDATE {eventbrite_venue} SET country_code = country');

  db_drop_field('eventbrite_venue', 'country');
}

/**
 * Install eventbrite_event table
 */
function eventbrite_update_7006() {
  $schema['eventbrite_event'] = array(
    'fields' => array(
      'id' => array(
        'description' => "The eventbrite_event entity id.",
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'user_key' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => FALSE,
      ),
      'event_id' => array(
        'description' => "The Eventbrite event id.",
        'type' => 'varchar',
        'length' => '20',
        'not null' => TRUE,
      ),
      'title' => array(
        'description' => "The event title.",
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'description' => array(
        'description' => "The event description.",
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'medium',
      ),
      'description_format' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'start_date' => array(
        'description' => 'The event start date and time, in ISO 8601 format',
        'type' => 'datetime',
        'mysql_type' => 'datetime',
        'pgsql_type' => 'timestamp without time zone',
        'sqlite_type' => 'varchar',
        'sqlsrv_type' => 'smalldatetime',
        'not null' => TRUE,
      ),
      'end_date' => array(
        'description' => 'The event end date and time, in ISO 8601 format',
        'type' => 'datetime',
        'mysql_type' => 'datetime',
        'pgsql_type' => 'timestamp without time zone',
        'sqlite_type' => 'varchar',
        'sqlsrv_type' => 'smalldatetime',
        'not null' => TRUE,
      ),
      'privacy' => array(
        'description' => '0 for a private event, 1 for a public event. If not provided, will default to 0.',
        'type' => 'int',
        'not null' => TRUE,
        'size' => 'tiny',
        'default' => 0,
      ),
      'personalized_url' => array(
        'description' => 'The event registration URL.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'venue_id' => array(
        'description' => 'The event venue ID',
        'type' => 'varchar',
        'length' => 32,
        'not null' => FALSE,
      ),
      'organizer_id' => array(
        'description' => 'The event organizer ID.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => FALSE,
      ),
      'capacity' => array(
        'description' => 'The maximum number of people who can attend the event.',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'status' => array(
        'description' => 'The event status. Allowed values are 0 for “draft”, 1 for “live”.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the event was most created.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'modified' => array(
        'description' => 'The Unix timestamp when the event was most recently saved.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'event_id' => array('event_id'),
    ),
    'foreign keys' => array(
      'eventbrite_organizer' => array(
        'table' => 'eventbrite_organizer',
        'columns' => array('organizer_id' => 'organizer_id'),
      ),
      'eventbrite_venue' => array(
        'table' => 'eventbrite_venue',
        'columns' => array('venue_id' => 'venue_id'),
      ),
    ),
  );
  
  if (!db_table_exists('eventbrite_event')) {
    db_create_table('eventbrite_event', $schema['eventbrite_event']);
  }
}

